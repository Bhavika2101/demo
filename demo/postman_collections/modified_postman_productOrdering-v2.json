{
  "item": [
    {
      "id": "fd8187d1-86e6-48b5-83bf-5af5a8cc26a1",
      "name": "productOrder",
      "item": [
        {
          "id": "0aeab387-06b8-43d3-bc0e-b5d33d8bd7ca",
          "name": "Request Opening Order",
          "request": {
            "name": "Request Opening Order",
            "description": {},
            "url": {
              "path": [
                "productOrder"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "(Required) Unique request identifier",
                "key": "X-Request-ID",
                "value": "{{X-Request-ID}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"order\": {\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n            \"type\": \"{{type}}\",\n            \"infraType\": \"{{infraType}}\",\n            \"customer\": {\n                \"customer\": {\n                    \"name\": \"{{name}}\",\n                    \"subscriberId\": \"{{subscriberId}}\",\n                    \"phoneNumber\": {\n                        \"phoneNumbers\": \"{{phoneNumbers}}\"\n                    },\n                    \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                    \"businessUnity\": \"{{businessUnity}}\",\n                    \"fantasyName\": \"{{fantasyName}}\",\n                    \"workContact\": {\n                        \"name\": \"{{name}}\",\n                        \"email\": \"{{email}}\",\n                        \"phone\": \"{{phone}}\"\n                    }\n                }\n            },\n            \"appointment\": {\n                \"appointment\": {\n                    \"hasSlot\": \"{{hasSlot}}\",\n                    \"mandatoryType\": \"{{mandatoryType}}\",\n                    \"date\": \"{{date}}\",\n                    \"workOrderId\": \"{{workOrderId}}\"\n                }\n            },\n            \"addresses\": {\n                \"addresses\": {\n                    \"address\": {\n                        \"id\": \"{{id}}\",\n                        \"inventoryId\": \"{{inventoryId}}\",\n                        \"reference\": \"{{reference}}\",\n                        \"complement\": {\n                            \"complement\": {\n                                \"value\": \"{{value}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"addressChange\": {\n                \"flag\": false\n            },\n            \"products\": {\n                \"products\": {\n                    \"product\": \"{{product}}\"\n                }\n            },\n            \"equipments\": {\n                \"equipments\": {\n                    \"equipment\": \"{{equipment}}\"\n                }\n            },\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"orderItem\": \"{{orderItem}}\",\n            \"task\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": \"{{description}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "136a31ee-959b-41c6-a00b-8aa6760f0784",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"201\",\n    \"message\": \"Created\"\n  },\n  \"order\": {\n    \"id\": \"20230315000001\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c16c4a72-cdc6-49a6-bab0-8ea4c1346440",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a42b9858-4ec0-440a-88fc-867d2ac8c891",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "be4e602b-24e4-4226-8c50-c829453532bb",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f1074e80-5772-4ec2-b6a1-741a1fd66c5a",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c9caa07e-e9ab-4888-90fd-94c41e465c2f",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "38c8e762-c881-46b1-b42c-f8389b9eb4ba",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f885b3c5-2754-47d2-98e7-37c451c29ba6",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e16884f8-ef24-49d6-93cc-ae470faf250c",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "51ac62a6-907a-4466-9c4a-a5793018b61d",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "(Required) Unique request identifier",
                    "key": "X-Request-ID",
                    "value": "{{X-Request-ID}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control`)){\n          if(pm.expect(_.get(responseData[0], `control`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n          if(pm.expect(_.get(pm.response.json(), `control`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.type`)){\n          if(pm.expect(_.get(responseData[0], `control.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n          if(pm.expect(_.get(pm.response.json(), `control.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('control.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.message`)){\n          if(pm.expect(_.get(responseData[0], `control.message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n          if(pm.expect(_.get(pm.response.json(), `control.message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('control.message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.code`)){\n          if(pm.expect(_.get(responseData[0], `control.code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n          if(pm.expect(_.get(pm.response.json(), `control.code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('control.code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `order` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`order`)){\n          if(pm.expect(_.get(responseData[0], `order`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `order`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `order` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n          if(pm.expect(_.get(pm.response.json(), `order`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `order.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`order.id`)){\n          if(pm.expect(_.get(responseData[0], `order.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `order.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `order.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`order.id`)){\n          if(pm.expect(_.get(pm.response.json(), `order.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `order.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('order.id length to be atmost `25`',function(){\n          pm.expect(_.get(responseData, \"order.id\", \"\").length).to.be.at.most(25);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "9fe1a451-428e-42a1-96d4-403081d92b88",
          "name": "Patch Product Order By Id",
          "request": {
            "name": "Patch Product Order By Id",
            "description": {},
            "url": {
              "path": [
                "productOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"addresses\": {\n            \"addresses\": {\n                \"address\": {\n                    \"id\": \"{{id}}\",\n                    \"inventoryId\": \"{{inventoryId}}\",\n                    \"reference\": \"{{reference}}\",\n                    \"complement\": {\n                        \"complement\": {\n                            \"complements\": \"{{complements}}\"\n                        }\n                    }\n                }\n            }\n        },\n        \"customer\": {\n            \"customer\": {\n                \"name\": \"{{name}}\",\n                \"subscriberId\": \"{{subscriberId}}\",\n                \"phoneNumber\": {\n                    \"phoneNumbers\": \"{{phoneNumbers}}\"\n                },\n                \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                \"businessUnity\": \"{{businessUnity}}\",\n                \"fantasyName\": \"{{fantasyName}}\",\n                \"workContact\": {\n                    \"name\": \"{{name}}\",\n                    \"email\": \"{{email}}\",\n                    \"phone\": \"{{phone}}\"\n                }\n            }\n        },\n        \"appointment\": {\n            \"appointment\": {\n                \"hasSlot\": \"{{hasSlot}}\",\n                \"mandatoryType\": \"{{mandatoryType}}\",\n                \"date\": \"{{date}}\",\n                \"workOrderId\": \"{{workOrderId}}\"\n            }\n        },\n        \"products\": {\n            \"products\": {\n                \"product\": \"{{product}}\"\n            }\n        },\n        \"equipments\": {\n            \"equipments\": {\n                \"equipment\": \"{{equipment}}\"\n            }\n        },\n        \"issue\": {\n            \"issue\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": {\n                    \"description\": \"{{description}}\"\n                },\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        },\n        \"orderItem\": \"{{orderItem}}\",\n        \"task\": {\n            \"code\": {\n                \"code\": \"{{code}}\"\n            },\n            \"description\": \"{{description}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "6eb45807-dddc-40b5-bd01-de580009ecf5",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b7307f3b-dd81-43fd-932f-62b3ef2ec50e",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e523983c-e940-4f51-a0b5-090ae556791f",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "70dee8fc-fc68-434d-8c6e-ec65c0db20ab",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fe6151f8-f2a4-4929-b80c-8147dd733c54",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fc157ca4-ac8a-47cc-9acc-d6a05fa3957a",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6484cbd3-be30-4890-a9a1-2f4a2e93fd35",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "209e5430-303b-4387-a7f9-ae22aaeca557",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "36d6c58e-b944-4bf4-a222-34fa5b9debc9",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d646f0bf-4b6c-4c74-a9bc-fcba0a8566b7",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder/:order.Id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "1a32eccb-3cb8-48fa-8c2c-b4af7771ce2a",
      "name": "Cancel Product Order By Id",
      "request": {
        "name": "Cancel Product Order By Id",
        "description": {},
        "url": {
          "path": [
            "cancelProductOrder",
            ":order.Id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{order.Id}}",
              "key": "order.Id",
              "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
            }
          ]
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "817d2f3d-8cad-43f6-a18b-75f599e26846",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "220ae3fa-3711-410b-8c37-19338dcf3334",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f9b31b06-6fcc-4b23-854c-8ef68716ad3a",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "124c0373-5044-42d6-ac40-1ee71dd0ca09",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a6ab12b1-bc25-4a23-847c-7f4be8d67d52",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "465ebb3a-d453-4d0e-82c2-af3f4af59c57",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "32f7363b-539e-4bfe-b6e9-0e20d1fe8554",
          "name": "Locked",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Locked (WebDAV) (RFC 4918)",
          "code": 423,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"423\",\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "c3da3fc0-ae76-495e-914c-8325deb77126",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "e67391a0-1e38-4be0-b357-8527f46a6954",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "b6251bbb-4164-4c59-80af-e9ba27375528",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9b4a02f2-2560-4670-8f7c-858419b3c036",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /cancelProductOrder/:order.Id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "1c68cae5-d520-41a4-95f9-16a848001155",
      "name": "listener",
      "item": [
        {
          "id": "99ce5a89-d67c-4bdf-a01a-32e3061049c6",
          "name": "State Change Event By Client",
          "request": {
            "name": "State Change Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderStateChangeEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "010ca3ab-4d6d-437d-b3f7-8c239caa15d3",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "1e0bcee9-db51-46b8-920d-aa682037aae0",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5b0b1ec4-26c0-44e2-a562-46fc86722df4",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fd789457-f6ee-45c9-b674-fe7641303925",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a653a617-082e-4170-a734-94385fffac6c",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6fe0ac42-801d-4347-b74c-22819e6dbfc1",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderStateChangeEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4f0e9cb0-3ec6-4a52-b023-275a4383ee5c",
          "name": "Product Order Create Event By Client",
          "request": {
            "name": "Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "910754fd-78cb-4f3b-9fb9-e07f18da2b3c",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2a6f64df-cc56-48ba-858a-1cc17cb63771",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "327994f3-1090-4d71-8c5d-38c3e505312f",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7bf21b25-1f78-4d58-8543-1792ecb3d2dd",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2cac04b1-9311-4233-90d6-03805eaf9339",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "503da5f0-fe29-4cb8-9aa6-6c121388c02b",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b98eb737-9530-4350-a65f-b71c080b88c2",
          "name": "Product Order Information Required Event",
          "request": {
            "name": "Product Order Information Required Event",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderInformationRequiredEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "6710cf81-1587-4cbf-9f44-794474427792",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "35ae9e8d-d3f7-4615-b974-a5adeeb58f73",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0f990a2e-9d2a-42e3-9bc7-9ea9610930b8",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f22b9145-51f2-49e3-85fd-b5387525fd9c",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "19a296ee-6ec2-4c33-9cd8-ab86dcd4bc5e",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c5335d9e-b7e4-4602-8633-aad30c9a3554",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderInformationRequiredEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d532a612-6562-4894-bbd4-67a19ad08853",
          "name": "Cancel Product Order Create Event By Client",
          "request": {
            "name": "Cancel Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "cancelProductOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "488e54e6-1f27-4d7b-a422-7b4e9f52803f",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a85b5c4a-7dba-4f34-9967-c993442bc3fa",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "dceb9c63-a2a3-446a-9acc-693f906460e6",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "9373fafa-a464-4115-8af8-4f1aeafe3e41",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "9118f86a-b71d-4b71-8985-3896ed424745",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8ca342c9-8b29-460a-8542-e1ec5afc86da",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/cancelProductOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "e9fe1b83-5115-4e74-aedb-5b16ccc31ba0",
    "name": "ProductOrdering",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}