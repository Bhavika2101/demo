{
  "item": [
    {
      "id": "393f788b-0d88-4c85-ac4d-f99ef3b7458c",
      "name": "productOrder",
      "item": [
        {
          "id": "ffaf64eb-29ff-44f9-90b9-18cd0da61cc4",
          "name": "Request Opening Order",
          "request": {
            "name": "Request Opening Order",
            "description": {},
            "url": {
              "path": [
                "productOrder"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"order\": {\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n            \"type\": \"{{type}}\",\n            \"infraType\": \"{{infraType}}\",\n            \"customer\": {\n                \"customer\": {\n                    \"name\": \"{{name}}\",\n                    \"subscriberId\": \"{{subscriberId}}\",\n                    \"phoneNumber\": {\n                        \"phoneNumbers\": \"{{phoneNumbers}}\"\n                    },\n                    \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                    \"businessUnity\": \"{{businessUnity}}\",\n                    \"fantasyName\": \"{{fantasyName}}\",\n                    \"workContact\": {\n                        \"name\": \"{{name}}\",\n                        \"email\": \"{{email}}\",\n                        \"phone\": \"{{phone}}\"\n                    }\n                }\n            },\n            \"appointment\": {\n                \"appointment\": {\n                    \"hasSlot\": \"{{hasSlot}}\",\n                    \"mandatoryType\": \"{{mandatoryType}}\",\n                    \"date\": \"{{date}}\",\n                    \"workOrderId\": \"{{workOrderId}}\"\n                }\n            },\n            \"addresses\": {\n                \"addresses\": {\n                    \"address\": {\n                        \"id\": \"{{id}}\",\n                        \"inventoryId\": \"{{inventoryId}}\",\n                        \"reference\": \"{{reference}}\",\n                        \"complement\": {\n                            \"complement\": {\n                                \"value\": \"{{value}}\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"addressChange\": {\n                \"flag\": false\n            },\n            \"products\": {\n                \"products\": {\n                    \"product\": \"{{product}}\"\n                }\n            },\n            \"equipments\": {\n                \"equipments\": {\n                    \"equipment\": \"{{equipment}}\"\n                }\n            },\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"orderItem\": \"{{orderItem}}\",\n            \"task\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": \"{{description}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\"\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "d9de88c4-d0c1-4369-8b66-11990a29bac5",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"201\",\n    \"message\": \"Created\"\n  },\n  \"order\": {\n    \"id\": \"20230315000001\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e33303df-ec3b-44e0-9253-4b7a04e19084",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "69a2cad7-27ff-40e0-a0e4-f906b5eecfd5",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5ecb91bb-dce7-4be3-ae31-673f81ecc437",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "846a9cc4-2f63-4bac-bf8d-040c1cbec7c1",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "468ae12c-3f88-41cd-9f32-5a9705ee623b",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e40eed3e-ba18-4d7d-8908-6fcd6de46844",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "dd82ef1d-c48c-42eb-a140-d6ef76e2bb47",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0da3759c-5a3c-4b8f-8afe-d0a3d9b00092",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "95209f1e-c7e6-4901-9b95-c1a66f2fe2cc",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"customer\": {\n            \"name\": \"{{name}}\",\n            \"subscriberId\": \"{{subscriberId}}\",\n            \"businessUnity\": \"{{businessUnity}}\",\n            \"fantasyName\": \"{{fantasyName}}\",\n            \"phoneNumber\": {\n                \"phoneNumbers\": \"{{phoneNumbers}}\"\n            },\n            \"workContact\": {\n                \"name\": \"{{name}}\",\n                \"email\": \"{{email}}\",\n                \"phone\": \"{{phone}}\"\n            }\n        },\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"addresses\": {\n            \"address\": {\n                \"id\": \"{{id}}\",\n                \"inventoryId\": \"{{inventoryId}}\",\n                \"reference\": \"{{reference}}\",\n                \"complement\": {\n                    \"complements\": \"{{complements}}\"\n                }\n            }\n        },\n        \"products\": {\n            \"product\": \"{{product}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control`)){\n          if(pm.expect(_.get(responseData[0], `control`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control`)){\n          if(pm.expect(_.get(pm.response.json(), `control`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.type`)){\n          if(pm.expect(_.get(responseData[0], `control.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.type`)){\n          if(pm.expect(_.get(pm.response.json(), `control.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('control.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"control.type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('control.type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"control.type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.message`)){\n          if(pm.expect(_.get(responseData[0], `control.message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.message`)){\n          if(pm.expect(_.get(pm.response.json(), `control.message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('control.message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"control.message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `control.code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`control.code`)){\n          if(pm.expect(_.get(responseData[0], `control.code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `control.code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `control.code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`control.code`)){\n          if(pm.expect(_.get(pm.response.json(), `control.code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `control.code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('control.code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"control.code\", \"\").length).to.be.at.most(3);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `order` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`order`)){\n          if(pm.expect(_.get(responseData[0], `order`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `order`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `order` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`order`)){\n          if(pm.expect(_.get(pm.response.json(), `order`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `order`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `order.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`order.id`)){\n          if(pm.expect(_.get(responseData[0], `order.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `order.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `order.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`order.id`)){\n          if(pm.expect(_.get(pm.response.json(), `order.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `order.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('order.id length to be atmost `25`',function(){\n          pm.expect(_.get(responseData, \"order.id\", \"\").length).to.be.at.most(25);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "7dbd40f5-2515-43eb-a17b-d91214050f10",
          "name": "Patch Product Order By Id",
          "request": {
            "name": "Patch Product Order By Id",
            "description": {},
            "url": {
              "path": [
                "productOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"associatedDocumentDate\": \"{{associatedDocumentDate}}\",\n        \"type\": \"{{type}}\",\n        \"infraType\": \"{{infraType}}\",\n        \"addresses\": {\n            \"addresses\": {\n                \"address\": {\n                    \"id\": \"{{id}}\",\n                    \"inventoryId\": \"{{inventoryId}}\",\n                    \"reference\": \"{{reference}}\",\n                    \"complement\": {\n                        \"complement\": {\n                            \"complements\": \"{{complements}}\"\n                        }\n                    }\n                }\n            }\n        },\n        \"customer\": {\n            \"customer\": {\n                \"name\": \"{{name}}\",\n                \"subscriberId\": \"{{subscriberId}}\",\n                \"phoneNumber\": {\n                    \"phoneNumbers\": \"{{phoneNumbers}}\"\n                },\n                \"subscriberIdOld\": \"{{subscriberIdOld}}\",\n                \"businessUnity\": \"{{businessUnity}}\",\n                \"fantasyName\": \"{{fantasyName}}\",\n                \"workContact\": {\n                    \"name\": \"{{name}}\",\n                    \"email\": \"{{email}}\",\n                    \"phone\": \"{{phone}}\"\n                }\n            }\n        },\n        \"appointment\": {\n            \"appointment\": {\n                \"hasSlot\": \"{{hasSlot}}\",\n                \"mandatoryType\": \"{{mandatoryType}}\",\n                \"date\": \"{{date}}\",\n                \"workOrderId\": \"{{workOrderId}}\"\n            }\n        },\n        \"products\": {\n            \"products\": {\n                \"product\": \"{{product}}\"\n            }\n        },\n        \"equipments\": {\n            \"equipments\": {\n                \"equipment\": \"{{equipment}}\"\n            }\n        },\n        \"issue\": {\n            \"issue\": {\n                \"code\": {\n                    \"code\": \"{{code}}\"\n                },\n                \"description\": {\n                    \"description\": \"{{description}}\"\n                },\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        },\n        \"orderItem\": \"{{orderItem}}\",\n        \"task\": {\n            \"code\": {\n                \"code\": \"{{code}}\"\n            },\n            \"description\": \"{{description}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "d3367a13-17fc-4eb2-a52a-165fdd3cf721",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e03fe62d-11b5-4367-b153-930ea97151cc",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a29de742-64a7-4d7a-b699-99487a1864c7",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "73fab6b3-f9c7-44a1-b7b6-c924de472fe3",
              "name": "Forbidden - Scope Not Permitted",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "31e3e75b-bc3b-4694-a671-d5f17043fa04",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "348da496-6309-4d5d-8c30-ba2632296018",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Acceptable",
              "code": 406,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a2b333a1-8fed-4222-bfc8-2769088ce28f",
              "name": "Too Many Requests - Exceeded Quota",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c52a09fa-bcdb-4ba9-bd47-e93bba28aba8",
              "name": "Internal Server Error",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "73eb396b-637d-46d1-9478-73ac47aa549f",
              "name": "Service Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "62980f42-ee9d-459e-b488-7019f54b84c1",
              "name": "Gateway Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "productOrder",
                    ":order.Id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{order.Id}}",
                      "key": "order.Id",
                      "description": "(Required) identificador unico da ordem do serviço a ser atualizada"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"order\": {\n        \"correlationOrder\": \"{{correlationOrder}}\",\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"appointment\": {\n            \"hasSlot\": true,\n            \"date\": \"{{date}}\",\n            \"mandatoryType\": \"{{mandatoryType}}\",\n            \"workOrderId\": \"{{workOrderId}}\"\n        },\n        \"issue\": {\n            \"code\": \"{{code}}\",\n            \"observation\": \"{{observation}}\",\n            \"updateDate\": \"{{updateDate}}\",\n            \"action\": \"{{action}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /productOrder/:order.Id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "8c58381d-65b2-4a99-9551-1e9b28efa0fa",
      "name": "Cancel Product Order By Id",
      "request": {
        "name": "Cancel Product Order By Id",
        "description": {},
        "url": {
          "path": [
            "cancelProductOrder",
            ":order.Id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{order.Id}}",
              "key": "order.Id",
              "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
            }
          ]
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "9f21248f-13de-4a6b-8323-7403a6dd989e",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"S\",\n    \"code\": \"200\",\n    \"message\": \"OK\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "713b7ba9-6b8e-4e18-a3bc-05bb4cd60696",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"400\",\n    \"message\": \"Bad Request\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "dab9aaeb-5a7d-4b89-8cf2-cbe0f2941c04",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "150b3749-2ff9-485a-9bc6-412b49c7cf00",
          "name": "Forbidden - Scope Not Permitted",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"403\",\n    \"message\": \"Forbidden - Scope Not Permitted\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "192bbc63-d5de-4bc8-bccb-bc6c8e708ded",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"404\",\n    \"message\": \"Not Found\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "75bb03b1-d086-48bc-9767-2649ea37123a",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Not Acceptable",
          "code": 406,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"406\",\n    \"message\": \"Not Acceptable (AssociatedDocument já existente/utilizado)\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "1bc2c289-d53c-4e35-8320-04372d281119",
          "name": "Locked",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Locked (WebDAV) (RFC 4918)",
          "code": 423,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"423\",\n    \"message\": \"Agendamento não pode ser alterado\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9fccd0cb-d25b-4b9f-8462-818b6f3050f3",
          "name": "Too Many Requests - Exceeded Quota",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Too Many Requests",
          "code": 429,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"E\",\n    \"code\": \"429\",\n    \"message\": \"Too Many Requests - Exceeded Quota\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "0f069ea9-673c-4765-8983-b21ed24cf2f1",
          "name": "Internal Server Error",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"500\",\n    \"message\": \"Internal Server Error\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "a8d55930-c176-41a1-a879-e7991b95a6b3",
          "name": "Service Unavailable",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Service Unavailable",
          "code": 503,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"503\",\n    \"message\": \"Service Unavailable\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "66eda34e-9444-42e0-97cd-f3b3f0c99ac1",
          "name": "Gateway Timeout",
          "originalRequest": {
            "url": {
              "path": [
                "cancelProductOrder",
                ":order.Id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{order.Id}}",
                  "key": "order.Id",
                  "description": "(Required) identificador unico da ordem do serviço a ser cancelada"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"associatedDocument\": \"{{associatedDocument}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Gateway Timeout",
          "code": 504,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"control\": {\n    \"type\": \"T\",\n    \"code\": \"504\",\n    \"message\": \"Gateway Timeout\"\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /cancelProductOrder/:order.Id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden - Scope Not Permitted\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 406){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Acceptable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 423){\n    pm.test(\"Locked\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Locked (WebDAV) (RFC 4918)\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Too Many Requests - Exceeded Quota\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"Internal Server Error\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Service Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Gateway Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `control` field',function(){\n            pm.expect(responseData.control).to.exist.and.to.be.a(\"object\");\n          pm.expect(responseData.control).to.eql(JSON.parse(pm.request.body).control);\n\n          })\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "524f4839-db9f-4a2b-bd19-5a7b8079ab33",
      "name": "listener",
      "item": [
        {
          "id": "d88a9a8b-4521-46a0-b1cb-0b6577701bf9",
          "name": "State Change Event By Client",
          "request": {
            "name": "State Change Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderStateChangeEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "6f809f9c-7870-43d0-b69a-7edc11ac48e0",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "189658be-177b-4925-987e-bb45c3158d50",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "3869f665-3426-4bb8-b15f-3b4d6f0e8369",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8299d00f-0276-4a5f-8c43-136c7423a218",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "86d544c7-ac4c-4bff-ae45-5739847b95e7",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "17d58cf9-5653-4668-af1e-ae14a7b1716f",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderStateChangeEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"gponAccess\": \"{{gponAccess}}\",\n                \"fiberPath\": {\n                    \"items\": {\n                        \"item\": \"{{item}}\"\n                    }\n                }\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderStateChangeEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2cc3c94b-5b76-4c8b-92cf-ca79bb6399d0",
          "name": "Product Order Create Event By Client",
          "request": {
            "name": "Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "91f11964-9fbc-4ec2-9ebf-11b48d57ca35",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a01a8f66-65d1-45e1-b275-bd04ad4edf63",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fbc77b51-e24e-43ac-a375-32e7d3048b81",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4ce98c20-8aca-46e1-8e1a-8683c36fab74",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a1ff94b7-8023-4a8d-8ff7-27ca35681873",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "55448cad-585a-4873-8a3d-d686fb630453",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "40b9e6e8-ad10-45e9-95b7-264087f5c26f",
          "name": "Product Order Information Required Event",
          "request": {
            "name": "Product Order Information Required Event",
            "description": {},
            "url": {
              "path": [
                "listener",
                "productOrderInformationRequiredEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "6c1c8ec1-7df4-40a1-8245-b4101ae7cd6f",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6558bc2c-2b96-47d5-b341-e5600d5dbf04",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2f32521c-f2c4-478f-b3a0-f054cd590a38",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8d415128-8108-4be4-bfbf-7ff6f0df0546",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "de60d2de-991b-4d2c-970b-89c5ac203908",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "44b9a074-7c26-456a-b597-12d64cb3210c",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "productOrderInformationRequiredEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"code\": \"{{code}}\",\n                \"description\": \"{{description}}\",\n                \"type\": \"{{type}}\",\n                \"observation\": \"{{observation}}\",\n                \"updateDate\": \"{{updateDate}}\",\n                \"action\": \"{{action}}\",\n                \"task\": \"{{task}}\",\n                \"fieldActivity\": \"{{fieldActivity}}\",\n                \"reason\": \"{{reason}}\"\n            }\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/productOrderInformationRequiredEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(responseData[0], `type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`type`)){\n          if(pm.expect(_.get(pm.response.json(), `type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"type\", \"\")).to.include.oneOf([\"S\",\"T\",\"E\"]);\n        })\n  \n        pm.test('type length to be atmost `1`',function(){\n          pm.expect(_.get(responseData, \"type\", \"\").length).to.be.at.most(1);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(responseData[0], `message`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n          if(pm.expect(_.get(pm.response.json(), `message`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('message length to be atmost `250`',function(){\n          pm.expect(_.get(responseData, \"message\", \"\").length).to.be.at.most(250);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(responseData[0], `code`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n          if(pm.expect(_.get(pm.response.json(), `code`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('code length to be atmost `3`',function(){\n          pm.expect(_.get(responseData, \"code\", \"\").length).to.be.at.most(3);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d0d236c5-4562-49a4-b9a9-10a498364fa7",
          "name": "Cancel Product Order Create Event By Client",
          "request": {
            "name": "Cancel Product Order Create Event By Client",
            "description": {},
            "url": {
              "path": [
                "listener",
                "cancelProductOrderCreateEvent"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"notification\": {\n        \"date\": \"{{date}}\",\n        \"customer\": {\n            \"subscriberId\": \"{{subscriberId}}\"\n        },\n        \"order\": {\n            \"id\": \"{{id}}\",\n            \"correlationOrder\": \"{{correlationOrder}}\",\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"issue\": {\n                \"issue\": {\n                    \"code\": {\n                        \"code\": \"{{code}}\"\n                    },\n                    \"description\": {\n                        \"description\": \"{{description}}\"\n                    },\n                    \"type\": \"{{type}}\",\n                    \"observation\": \"{{observation}}\",\n                    \"updateDate\": \"{{updateDate}}\",\n                    \"action\": \"{{action}}\",\n                    \"task\": \"{{task}}\",\n                    \"fieldActivity\": \"{{fieldActivity}}\",\n                    \"reason\": \"{{reason}}\"\n                }\n            },\n            \"type\": \"{{type}}\",\n            \"code\": \"{{code}}\",\n            \"description\": \"{{description}}\",\n            \"lostEquipment\": \"{{lostEquipment}}\",\n            \"resource\": {\n                \"resource\": {\n                    \"gponAccess\": \"{{gponAccess}}\",\n                    \"devices\": {\n                        \"device\": \"{{device}}\"\n                    },\n                    \"fiberPath\": {\n                        \"items\": {\n                            \"item\": \"{{item}}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "bd09acb9-8357-40c9-9c37-32ec21efaa74",
              "name": "Operação realizada com sucesso",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fd88bbdb-b81a-4080-b63e-5f4990b1712a",
              "name": "BadRequest",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6e85f98e-e580-4820-b991-748fa7229349",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6f51e2b8-3700-4716-bc13-02c5f34bd479",
              "name": "ServerError",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "08050e9d-111e-462c-a5e1-ad3437a20de1",
              "name": "Unavailable",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "58fbbee9-5f98-485a-af39-cbdabc1b18d7",
              "name": "Timeout",
              "originalRequest": {
                "url": {
                  "path": [
                    "listener",
                    "cancelProductOrderCreateEvent"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"notification\": {\n        \"order\": {\n            \"associatedDocument\": \"{{associatedDocument}}\",\n            \"id\": \"{{id}}\"\n        }\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Gateway Timeout",
              "code": 504,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test productAPI-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /listener/cancelProductOrderCreateEvent for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"Operação realizada com sucesso\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"No Content\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"BadRequest\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 500){\n    pm.test(\"ServerError\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n\nif (pm.response.code == 503){\n    pm.test(\"Unavailable\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Service Unavailable\");});\n}\n\nif (pm.response.code == 504){\n    pm.test(\"Timeout\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Gateway Timeout\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "f6fdd956-9f8f-45dd-a6ca-f0961c3898ed",
    "name": "ProductOrdering",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}