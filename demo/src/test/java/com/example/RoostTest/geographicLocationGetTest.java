// ********RoostGPT********
/*
Test generated by RoostGPT for test rest-assuredProductAPI using AI Type Open AI and AI Model gpt-4

Test generated for /geographicLocation_get for http method type GET in rest-assured framework

RoostTestHash=d2fd963bfb


*/

// ********RoostGPT********

public class geographicLocationGetTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {"BASE_URL"};
      envList = dataloader.load("src/test/java/com/example/RoostTest/geographicLocationGetTest.csv", envVarsList);
    }

    @Test  
    public void geographicLocationGet_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): testData.get("BASE_URL");  
          JSONObject requestBodyObject = new JSONObject();
          if(testData.get("RequestBody") != null){
              requestBodyObject = new JSONObject(testData.get("RequestBody"));
          }
          Response responseObj = given()
            .queryParam("latitude", testData.get("latitude") != null ? testData.get("latitude") : "")
            .queryParam("longitude", testData.get("longitude") != null ? testData.get("longitude") : "")
            .queryParam("radius", testData.get("radius") != null ? testData.get("radius") : "")
            .when()
            .get("/geographicLocation")  
            .then() 
            .extract().response(); 
          JsonPath response;
          String contentType = responseObj.getContentType();

          System.out.printf("Test Case %d: geographicLocationGet_Test \n", testNumber++);
          System.out.println("Request: GET /geographicLocation");
          System.out.println("Status Code: " + responseObj.statusCode());
          if (testData.get("statusCode") != null) {
            String statusCodeFromCSV = testData.get("statusCode");
            if (statusCodeFromCSV.contains("X")) {
              MatcherAssert.assertThat(
                  "Expected a status code of category " + statusCodeFromCSV + ", but got "
                      + Integer.toString(responseObj.statusCode()) + " instead",
                  Integer.toString(responseObj.statusCode()).charAt(0), equalTo(statusCodeFromCSV.charAt(0)));
            } else {
              MatcherAssert.assertThat(
                  Integer.toString(responseObj.statusCode()), equalTo(statusCodeFromCSV));
            }
          } else {  
            List<Integer> expectedStatusCodes = Arrays.asList(200,400,403,404,422,429,500,503,504);
            MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
          }

          // Extract the validation to a separate method
          validateResponse(responseObj, contentType, testData);
        }  
    }

    private void validateResponse(Response responseObj, String contentType, Map<String, String> testData) {
        // Your validation logic here
    }
}
